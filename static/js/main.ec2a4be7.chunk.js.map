{"version":3,"sources":["components/FileNamePrompt.js","components/Toolbar.js","App.js","index.js"],"names":["FileNamePrompt","props","prepareDownload","state","date","name","prevNames","saveData","audioBlob","hideFileNamePrompt","includes","push","sort","Utils","storeObjectInLocalStorage","nowStr","formatDate","fileNameMidi","saveDataFinal","fileName","download","JSON","stringify","ext","type","split","fileNameAudio","saveAs","text","element","document","createElement","setAttribute","encodeURIComponent","style","display","body","appendChild","click","removeChild","handleSearchEntry","evt","str","target","value","toLowerCase","filtered","filter","d","setState","prevNamesFiltered","getObjectFromLocalStorage","Date","isRecording","recordAudio","this","className","onChange","onClick","icon","faDownload","fixedWidth","map","PureComponent","Toolbar","startRecording","console","log","midiRecorder","audioRecorder","showFileNamePrompt","recordingStart","start","alert","stopRecording","finishRecording","toggleAudioRecording","newValue","pageLoad","recordMidi","_this","stop","recordedNotes","length","window","confirm","offset","adjustedNotes","NoteArray","shiftTime","getNotes","notes","speed","selectedTrack","timeSelection","title","disabled","color","faCircle","faSave","faToggleOn","faToggleOff","verticalAlign","faMusic","faSlash","faMicrophoneSlash","App","href","faGithub","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ec2a4be7.chunk.js","sourcesContent":["import { faDownload } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { PureComponent } from 'react';\r\nimport { saveAs } from 'file-saver';\r\nimport { Utils } from 'musicvis-lib';\r\nimport './FileNamePrompt.css';\r\n\r\nexport default class FileNamePrompt extends PureComponent {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        const prevNames = Utils.getObjectFromLocalStorage('previousNames') || [];\r\n        const date = new Date();\r\n        this.state = {\r\n            isRecording: false,\r\n            recordAudio: true,\r\n            date,\r\n            name: `Unnamed`,\r\n            prevNames,\r\n            prevNamesFiltered: prevNames,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Sends the recording with meta data to the browser to be stored.\r\n     */\r\n    prepareDownload = () => {\r\n        const { date, name, prevNames } = this.state;\r\n        const { saveData, audioBlob, hideFileNamePrompt } = this.props;\r\n\r\n        // Save name\r\n        if (!prevNames.includes(name) && name !== '') {\r\n            prevNames.push(name);\r\n            prevNames.sort();\r\n            Utils.storeObjectInLocalStorage('previousNames', prevNames);\r\n        }\r\n\r\n        // Get file name\r\n        const nowStr = Utils.formatDate(date);\r\n        const fileNameMidi = `${name}_${nowStr}.json`;\r\n        // Save data to server\r\n        const saveDataFinal = {\r\n            ...saveData,\r\n            fileName: fileNameMidi,\r\n            name,\r\n            date,\r\n        };\r\n        // console.log(saveDataFinal);\r\n        this.download(JSON.stringify(saveDataFinal), fileNameMidi);\r\n        if (audioBlob) {\r\n            const ext = audioBlob.type.split('/')[1].split(';')[0];\r\n            const fileNameAudio = `${name}_${nowStr}.${ext}`;\r\n            saveAs(audioBlob, fileNameAudio);\r\n        }\r\n        hideFileNamePrompt();\r\n    };\r\n\r\n    /**\r\n     * Download JSON as text file\r\n     * @param {string} text JSOn content\r\n     * @param {string} fileName file name\r\n     */\r\n    download = (text, fileName) => {\r\n        const element = document.createElement('a');\r\n        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\r\n        element.setAttribute('download', fileName);\r\n        element.style.display = 'none';\r\n        document.body.appendChild(element);\r\n        element.click();\r\n        document.body.removeChild(element);\r\n    };\r\n\r\n    /**\r\n     * Filters file names to those that contain the input string.\r\n     * @param {Event} evt input onchange event\r\n     */\r\n    handleSearchEntry = (evt) => {\r\n        const str = evt.target.value.toLowerCase();\r\n        const filtered = this.state.prevNames.filter(d => d.toLowerCase().includes(str));\r\n        this.setState({\r\n            prevNamesFiltered: filtered,\r\n            name: str\r\n        });\r\n    };\r\n\r\n\r\n    render() {\r\n        const { name, prevNamesFiltered } = this.state;\r\n        return (\r\n            <div className='FileNamePrompt'>\r\n                <div>\r\n                    <div className='nameInputDiv'>\r\n                        <label>\r\n                            Name:&nbsp;\r\n                            <input\r\n                                className='nameInput'\r\n                                type='text'\r\n                                onChange={this.handleSearchEntry}\r\n                                value={name}\r\n                            />\r\n                        </label>\r\n                    </div>\r\n                    <div>\r\n                        <button\r\n                            className='downloadBtn'\r\n                            onClick={this.prepareDownload}\r\n                        >\r\n                            <FontAwesomeIcon icon={faDownload} fixedWidth />&nbsp;\r\n                            Download\r\n                        </button>\r\n                    </div>\r\n                    Previous names:\r\n                    <div className='prevNamesList'>\r\n                        {prevNamesFiltered.map(d => (\r\n                            <span\r\n                                className='prevName'\r\n                                key={d}\r\n                                onClick={() => this.setState({ name: d })}\r\n                            >\r\n                                {d}\r\n                            </span>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import { faCircle, faMusic, faSave, faToggleOn, faToggleOff, faMicrophoneSlash, faSlash } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { PureComponent } from 'react';\r\nimport FileNamePrompt from './FileNamePrompt';\r\nimport { Utils, recordAudio, recordMidi, NoteArray } from 'musicvis-lib';\r\nimport './Toolbar.css';\r\n\r\nexport default class Toolbar extends PureComponent {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isRecording: false,\r\n            recordAudio: Utils.getObjectFromLocalStorage('recordAudio') || false,\r\n            showFileNamePrompt: false,\r\n            // Recorders\r\n            midiRecorder: null,\r\n            audioRecorder: null\r\n        };\r\n        this.pageLoad = new Date();\r\n        this.recordingStart = new Date();\r\n    }\r\n\r\n    async componentDidMount() {\r\n        // Do this here since constructor cannot be async\r\n        try {\r\n            this.setState({ midiRecorder: await recordMidi() });\r\n            this.pageLoad = new Date();\r\n            console.log(`MIDI access sucessful at ${this.pageLoad}`);\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n        try {\r\n            this.setState({ audioRecorder: await recordAudio() });\r\n            console.log('Audio access sucessful');\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts a new recording.\r\n     */\r\n    startRecording = () => {\r\n        console.log('Starting recording');\r\n        const { midiRecorder, audioRecorder, recordAudio } = this.state;\r\n        if (!midiRecorder) {\r\n            alert('Cannot record MIDI, no access to device!');\r\n            return;\r\n        }\r\n        this.setState({\r\n            isRecording: true,\r\n            showFileNamePrompt: false,\r\n        });\r\n        this.recordingStart = new Date();\r\n        // Start MIDI / audio recording\r\n        midiRecorder.start();\r\n        if (recordAudio && audioRecorder) {\r\n            audioRecorder.start();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Stops and saves the currently running recording.\r\n     */\r\n    stopRecording = () => this.setState(\r\n        { isRecording: false },\r\n        () => this.finishRecording(this)\r\n    );\r\n\r\n    /**\r\n     * Sends the recording with meta data to the server to be stored.\r\n     */\r\n    async finishRecording(_this) {\r\n        const { midiRecorder, audioRecorder, recordAudio } = _this.state;\r\n        console.log('Stopping recording');\r\n        let audioBlob = null;\r\n        if (recordAudio && audioRecorder) {\r\n            audioBlob = await audioRecorder.stop();\r\n        }\r\n        const recordedNotes = midiRecorder.stop();\r\n        // See if there are notes\r\n        if (!recordedNotes || recordedNotes.length === 0) {\r\n            if (!window.confirm('No MIDI notes where recorded, save anyways?')) {\r\n                return;\r\n            }\r\n        }\r\n        // Adjust recording notes times to offset that the page might be open\r\n        // for some time already\r\n        const offset = (_this.pageLoad - _this.recordingStart) / 1000;\r\n        const adjustedNotes = new NoteArray(recordedNotes)\r\n            .shiftTime(offset)\r\n            .getNotes();\r\n        console.log(`Offsetting notes by ${offset} seconds, first will start at ${adjustedNotes[0].start}}`);\r\n        // Set save data to state and show FileNamePrompt\r\n        console.log(adjustedNotes);\r\n        const saveData = {\r\n            notes: adjustedNotes,\r\n            speed: 1,\r\n            selectedTrack: 0,\r\n            timeSelection: null\r\n        };\r\n        this.setState({\r\n            showFileNamePrompt: true,\r\n            saveData,\r\n            audioBlob,\r\n        });\r\n    }\r\n\r\n    hideFileNamePrompt = () => this.setState({ showFileNamePrompt: false });\r\n\r\n\r\n    /**\r\n     * Remember setting in LocalStorage\r\n     */\r\n    toggleAudioRecording = () => {\r\n        const { recordAudio } = this.state;\r\n        const newValue = !recordAudio;\r\n        Utils.storeObjectInLocalStorage('recordAudio', newValue);\r\n        this.setState({ recordAudio: newValue });\r\n    };\r\n\r\n\r\n    render() {\r\n        const { isRecording, recordAudio, midiRecorder, audioRecorder, showFileNamePrompt, saveData, audioBlob } = this.state;\r\n        return (\r\n            <div className='Toolbar'>\r\n                <div>\r\n                    <button\r\n                        title='Start recording'\r\n                        onClick={this.startRecording}\r\n                        disabled={isRecording}\r\n                    >\r\n                        <span style={{ color: 'rgb(175, 0, 0)' }}>\r\n                            <FontAwesomeIcon icon={faCircle} fixedWidth />\r\n                        </span>\r\n                        Start recording\r\n                    </button>\r\n                    <button\r\n                        title='Finish recording'\r\n                        onClick={this.stopRecording}\r\n                        disabled={!isRecording}\r\n                    >\r\n                        <FontAwesomeIcon icon={faSave} fixedWidth />\r\n                        Finish recording\r\n                    </button>\r\n                </div>\r\n                <div>\r\n                    <button\r\n                        onClick={this.toggleAudioRecording}\r\n                        disabled={isRecording}\r\n                    >\r\n                        <FontAwesomeIcon icon={recordAudio ? faToggleOn : faToggleOff} fixedWidth />&nbsp;\r\n                        Record audio\r\n                    </button>\r\n                </div>\r\n                <div>\r\n                    {!midiRecorder &&\r\n                        <div\r\n                            title='No MIDI access, cannot record anything! Connect device and reload page'\r\n                        >\r\n                            <span\r\n                                className='fa-layers fa-fw'\r\n                                style={{ verticalAlign: 'middle' }}\r\n                            >\r\n                                <FontAwesomeIcon icon={faMusic} fixedWidth />\r\n                                <FontAwesomeIcon icon={faSlash} fixedWidth />\r\n                            </span>\r\n                            &nbsp;\r\n                            No MIDI\r\n                        </div>\r\n                    }\r\n                    {!audioRecorder &&\r\n                        <div title='No microphone access, cannot record audio! Connect device and reload page'>\r\n                            <FontAwesomeIcon icon={faMicrophoneSlash} fixedWidth />\r\n                            &nbsp;\r\n                            No microphone\r\n                        </div>\r\n                    }\r\n                </div>\r\n                {showFileNamePrompt &&\r\n                    <FileNamePrompt\r\n                        saveData={saveData}\r\n                        audioBlob={audioBlob}\r\n                        hideFileNamePrompt={this.hideFileNamePrompt}\r\n                    />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import './App.css';\nimport Toolbar from './components/Toolbar';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\n\nfunction App() {\n  return (\n    <div className='App bright' >\n      <Toolbar />\n      <div className='githubLink'>\n        <a href='https://github.com/fheyen/midi-recorder'>\n          <FontAwesomeIcon icon={faGithub} />\n          &nbsp;\n          https://github.com/fheyen/midi-recorder\n        </a>\n      </div>\n    </div >\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}