{"version":3,"sources":["components/FileNamePrompt.js","components/Toolbar.js","App.js","index.js"],"names":["FileNamePrompt","props","prepareDownload","state","date","name","prevNames","saveData","audioBlob","hideFileNamePrompt","includes","push","sort","Utils","storeObjectInLocalStorage","nowStr","formatDate","fileNameMidi","saveDataFinal","fileName","console","log","download","JSON","stringify","ext","type","split","fileNameAudio","saveAs","text","element","document","createElement","setAttribute","encodeURIComponent","style","display","body","appendChild","click","removeChild","handleSearchEntry","evt","str","target","value","toLowerCase","filtered","filter","d","setState","prevNamesFiltered","getObjectFromLocalStorage","Date","isRecording","recordAudio","getTime","this","className","onChange","onClick","icon","faDownload","fixedWidth","map","PureComponent","Toolbar","startRecording","midiRecorder","audioRecorder","start","alert","stopRecording","finishRecording","showFileNamePrompt","toggleAudioRecording","newValue","recordMidi","_this","stop","recordedNotes","length","window","confirm","notes","speed","selectedTrack","timeSelection","title","disabled","color","faCircle","faSave","faToggleOn","faToggleOff","verticalAlign","faMusic","faSlash","faMicrophoneSlash","App","href","faGithub","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.63321d5b.chunk.js","sourcesContent":["import { faDownload } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React, { PureComponent } from 'react';\nimport { saveAs } from 'file-saver';\nimport { Utils } from 'musicvis-lib';\nimport '../style/FileNamePrompt.css';\n\nexport default class FileNamePrompt extends PureComponent {\n\n    constructor(props) {\n        super(props);\n        const prevNames = Utils.getObjectFromLocalStorage('previousNames') || [];\n        const date = new Date();\n        this.state = {\n            isRecording: false,\n            recordAudio: true,\n            date,\n            name: `Unnamed ${date.getTime()}`,\n            prevNames,\n            prevNamesFiltered: prevNames\n        };\n    }\n\n    /**\n     * Sends the recording with meta data to the server to be stored.\n     */\n    prepareDownload = () => {\n        const { date, name, prevNames } = this.state;\n        const { saveData, audioBlob, hideFileNamePrompt } = this.props;\n\n        // Save name\n        if (!prevNames.includes(name) && name !== '') {\n            prevNames.push(name);\n            prevNames.sort();\n            Utils.storeObjectInLocalStorage('previousNames', prevNames);\n        }\n\n        // Get file name\n        const nowStr = Utils.formatDate(date);\n        const fileNameMidi = `${name}_${nowStr}.json`;\n        // Save data to server\n        const saveDataFinal = {\n            ...saveData,\n            fileName: fileNameMidi,\n            name,\n            date,\n        };\n        console.log(saveDataFinal);\n        this.download(JSON.stringify(saveDataFinal), fileNameMidi);\n        if (audioBlob) {\n            const ext = audioBlob.type.split('/')[1].split(';')[0];\n            const fileNameAudio = `${name}_${nowStr}.${ext}`;\n            saveAs(audioBlob, fileNameAudio);\n        }\n        hideFileNamePrompt();\n    }\n\n    download = (text, fileName) => {\n        const element = document.createElement('a');\n        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n        element.setAttribute('download', fileName);\n        element.style.display = 'none';\n        document.body.appendChild(element);\n        element.click();\n        document.body.removeChild(element);\n    }\n\n    /**\n     * Filters file names to those that contain the input string.\n     * @param {Event} evt input onchange event\n     */\n    handleSearchEntry = (evt) => {\n        const str = evt.target.value.toLowerCase();\n        const filtered = this.state.prevNames.filter(d => d.toLowerCase().includes(str));\n        this.setState({\n            prevNamesFiltered: filtered,\n            name: str\n        });\n    }\n\n\n    render() {\n        const { name, prevNamesFiltered } = this.state;\n        return (\n            <div className='FileNamePrompt'>\n                <div>\n                    <div className='nameInputDiv'>\n                        <label>\n                            Name:&nbsp;\n                            <input\n                                className='nameInput'\n                                type='text'\n                                onChange={this.handleSearchEntry}\n                                // defaultValue={name}\n                                value={name}\n                            />\n                        </label>\n                    </div>\n                    <div>\n                        <button\n                            className='downloadBtn'\n                            onClick={this.prepareDownload}\n                        >\n                            <FontAwesomeIcon icon={faDownload} fixedWidth />&nbsp;\n                            Download\n                        </button>\n                    </div>\n                    Previous names:\n                    <div className='prevNamesList'>\n                        {prevNamesFiltered.map(d => (\n                            <span\n                                className='prevName'\n                                key={d}\n                                onClick={() => this.setState({ name: d })}\n                            >\n                                {d}\n                            </span>\n                        ))}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import { faCircle, faMusic, faSave, faToggleOn, faToggleOff, faMicrophoneSlash, faSlash } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { PureComponent } from 'react';\r\nimport FileNamePrompt from './FileNamePrompt';\r\nimport { Utils, recordAudio, recordMidi } from 'musicvis-lib';\r\nimport '../style/Toolbar.css';\r\n\r\nexport default class Toolbar extends PureComponent {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isRecording: false,\r\n            recordAudio: Utils.getObjectFromLocalStorage('recordAudio') || false,\r\n            showFileNamePrompt: false,\r\n            // Recorders\r\n            midiRecorder: null,\r\n            audioRecorder: null\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        // Do this here since constructor cannot be async\r\n        try {\r\n            this.setState({ midiRecorder: await recordMidi() });\r\n            console.log('MIDI access sucessful');\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n        try {\r\n            this.setState({ audioRecorder: await recordAudio() });\r\n            console.log('Audio access sucessful');\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts a new recording.\r\n     */\r\n    startRecording = () => {\r\n        console.log('Starting recording');\r\n        const { midiRecorder, audioRecorder, recordAudio } = this.state;\r\n        if (!midiRecorder) {\r\n            alert('Cannot record MIDI, no access to device!');\r\n            return;\r\n        }\r\n        this.setState({ isRecording: true });\r\n        // Start MIDI / audio recording\r\n        midiRecorder.start();\r\n        if (recordAudio && audioRecorder) {\r\n            audioRecorder.start();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops and saves the currently running recording.\r\n     */\r\n    stopRecording = () => this.setState(\r\n        { isRecording: false },\r\n        () => this.finishRecording(this)\r\n    );\r\n\r\n    /**\r\n     * Sends the recording with meta data to the server to be stored.\r\n     */\r\n    async finishRecording(_this) {\r\n        const { midiRecorder, audioRecorder, recordAudio } = _this.state;\r\n        console.log('Stopping recording');\r\n        let audioBlob = null;\r\n        if (recordAudio && audioRecorder) {\r\n            audioBlob = await audioRecorder.stop();\r\n        }\r\n        const recordedNotes = midiRecorder.stop();\r\n        // See if there are notes\r\n        if (!recordedNotes || recordedNotes.length === 0) {\r\n            if (!window.confirm('No MIDI notes where recorded, save anyways?')) {\r\n                return;\r\n            }\r\n        }\r\n        // Set save data to state and show FileNamePrompt\r\n        const saveData = {\r\n            notes: recordedNotes,\r\n            speed: 1,\r\n            selectedTrack: 0,\r\n            timeSelection: null\r\n        };\r\n        this.setState({\r\n            showFileNamePrompt: true,\r\n            saveData,\r\n            audioBlob,\r\n        });\r\n    }\r\n\r\n    hideFileNamePrompt = () => this.setState({ showFileNamePrompt: false });\r\n\r\n\r\n    /**\r\n     * Remember setting in LocalStorage\r\n     */\r\n    toggleAudioRecording = () => {\r\n        const { recordAudio } = this.state;\r\n        const newValue = !recordAudio;\r\n        Utils.storeObjectInLocalStorage('recordAudio', newValue);\r\n        this.setState({ recordAudio: newValue });\r\n    }\r\n\r\n\r\n    render() {\r\n        const { isRecording, recordAudio, midiRecorder, audioRecorder, showFileNamePrompt, saveData, audioBlob } = this.state;\r\n        return (\r\n            <div className='Toolbar'>\r\n                <div>\r\n                    <button\r\n                        title='Start recording'\r\n                        onClick={this.startRecording}\r\n                        disabled={isRecording}\r\n                    >\r\n                        <span style={{ color: 'rgb(175, 0, 0)' }}>\r\n                            <FontAwesomeIcon icon={faCircle} fixedWidth />\r\n                        </span>\r\n                        Start recording\r\n                    </button>\r\n                    <button\r\n                        title='Finish recording'\r\n                        onClick={this.stopRecording}\r\n                        disabled={!isRecording}\r\n                    >\r\n                        <FontAwesomeIcon icon={faSave} fixedWidth />\r\n                        Finish recording\r\n                    </button>\r\n                </div>\r\n                <div>\r\n                    <button\r\n                        onClick={this.toggleAudioRecording}\r\n                        disabled={isRecording}\r\n                    >\r\n                        <FontAwesomeIcon icon={recordAudio ? faToggleOn : faToggleOff} fixedWidth />&nbsp;\r\n                        Record audio\r\n                    </button>\r\n                </div>\r\n                <div>\r\n                    {!midiRecorder &&\r\n                        <span\r\n                            className='fa-layers fa-fw'\r\n                            style={{ verticalAlign: 'middle' }}\r\n                            title='No MIDI access, cannot record anything! Connect device and reload page'\r\n                        >\r\n                            <FontAwesomeIcon icon={faMusic} fixedWidth />\r\n                            <FontAwesomeIcon icon={faSlash} fixedWidth />\r\n                        </span>\r\n                    }\r\n                    {!audioRecorder &&\r\n                        <span title='No microphone access, cannot record audio! Connect device and reload page'>\r\n                            &nbsp;\r\n                            <FontAwesomeIcon icon={faMicrophoneSlash} fixedWidth />\r\n                        </span>\r\n                    }\r\n                </div>\r\n                {showFileNamePrompt &&\r\n                    <FileNamePrompt\r\n                        saveData={saveData}\r\n                        audioBlob={audioBlob}\r\n                        hideFileNamePrompt={this.hideFileNamePrompt}\r\n                    />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import './style/App.css';\nimport Toolbar from './components/Toolbar';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\n\nfunction App() {\n  return (\n    <div className='App bright' >\n      <Toolbar />\n      <div className='githubLink'>\n        <a href='https://github.com/fheyen/midi-recorder'>\n          <FontAwesomeIcon icon={faGithub} />&nbsp;\n                        https://github.com/fheyen/midi-recorder\n          </a>\n      </div>\n    </div >\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}